import requests
import os
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from app import add_document_to_chromadb, extract_text_from_pdf, extract_text_from_txt, list_documents, retrieve_documents_by_keywords

# üîπ –¢–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TELEGRAM_BOT_TOKEN = "7686007781:AAFVtkP5CaTFWN-soKmVO1Ihx6KiHq4VSrc"

# ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
async def send_telegram_message(chat_id, message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    data = {"chat_id": chat_id, "text": message}
    requests.post(url, data=data)

# ‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø AI-–±–æ—Ç.\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç (PDF/TXT) —Å –∫–æ–º–∞–Ω–¥–æ–π /addfile.\n"
        "–í–≤–µ–¥–∏—Ç–µ /open, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search <–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞> –¥–ª—è –ø–æ–∏—Å–∫–∞."
    )

# ‚úÖ –ö–æ–º–∞–Ω–¥–∞ /open (–°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)
async def open_documents(update: Update, context: CallbackContext):
    docs = list_documents()
    doc_list = "\n".join(docs)

    # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —á–∞—Å—Ç—è–º–∏, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    await send_long_message(update, f"üìÇ –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:\n{doc_list}")


# ‚úÖ –ö–æ–º–∞–Ω–¥–∞ /help (–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥)
# ‚úÖ –ö–æ–º–∞–Ω–¥–∞ /help (–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º)
async def help_command(update: Update, context: CallbackContext):
    help_text = (
        "üìå **–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:**\n\n"
        "üîπ `/start` ‚Äì –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "üîπ `/open` ‚Äì –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
        "üîπ `/search <–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞>` ‚Äì –ù–∞–π—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º\n"
        "üîπ `/addfile` ‚Äì –û—Ç–ø—Ä–∞–≤–∏—Ç—å PDF/TXT —Ñ–∞–π–ª –∏ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –±–∞–∑—É\n"
        "üîπ `/help` ‚Äì –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º\n"
    )

    await update.message.reply_text(help_text, parse_mode="Markdown")

# ‚úÖ –ö–æ–º–∞–Ω–¥–∞ /search (–ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º)
async def search_documents(update: Update, context: CallbackContext):
    query = " ".join(context.args)
    if not query:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /search.")
        return

    results = retrieve_documents_by_keywords(query)

    if not results or results == ["–î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."]:
        await update.message.reply_text("‚ö†Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return

    doc_list = "\n".join([" ".join(map(str, doc)) for doc in results])

    # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —á–∞—Å—Ç—è–º–∏, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    await send_long_message(update, f"üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n{doc_list}")


    # ‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ –≤ —Ç–µ–∫—Å—Ç
    doc_list = "\n".join([" ".join(map(str, doc)) for doc in results])

    await update.message.reply_text(f"üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n{doc_list}")

# ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (PDF, TXT)
async def handle_document(update: Update, context: CallbackContext):
    document = update.message.document
    chat_id = update.message.chat_id
    file_id = document.file_id
    file_name = document.file_name
    file_extension = file_name.split(".")[-1].lower()

    if file_extension not in ["pdf", "txt"]:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã PDF –∏ TXT.")
        return

    file = await context.bot.get_file(file_id)
    file_path = f"downloads/{file_name}"
    
    os.makedirs("downloads", exist_ok=True)

    await file.download_to_drive(file_path)
    
    if file_extension == "pdf":
        text = extract_text_from_pdf(file_path)
    else:
        text = extract_text_from_txt(file_path)

    add_document_to_chromadb(text, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id}", "telegram")

    await update.message.reply_text(f"üìÇ –î–æ–∫—É–º–µ–Ω—Ç '{file_name}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É!")

# ‚úÖ –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–±–∏–µ–Ω–∏—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def send_long_message(update, text, chunk_size=4000):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Å—Ç—è–º–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ"""
    for i in range(0, len(text), chunk_size):
        await update.message.reply_text(text[i:i+chunk_size])

# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("open", open_documents))  # ‚úÖ –¢–µ–ø–µ—Ä—å –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
    app.add_handler(CommandHandler("help", help_command))  # ‚úÖ –¢–µ–ø–µ—Ä—å –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
    app.add_handler(CommandHandler("search", search_documents))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    app.run_polling()

if __name__ == "__main__":
    main()

